module SWE_kernels

use VariableDefination
use pcomcotLIB_device

contains

attributes(global) subroutine massCartesian(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  m1, m2, n1, n2
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// determine the computational domain ///
if(LP(iLayer)%Level.gt.1) then 
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
else
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY
endif

!/// solve mass equation within computational domain ///!
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    if(LP(iLayer)%Z(i,j).le.-GP%PermanentDryLimit) then
        LP(iLayer)%H(2,i,j) = 0.0
    else
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i,j)
        endif
        if(j.eq.1) then
            n1 = 0.0
        else
            n1 = LP(iLayer)%N(1,i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            n2 = 0.0
        else
            n2 = LP(iLayer)%N(1,i,j)
        endif
        LP(iLayer)%H(2,i,j) = LP(iLayer)%H(1,i,j) - &
            LP(iLayer)%CC1*(m2-m1) - LP(iLayer)%CC2*(n2-n1)
    endif
    !//// calculate inundation in flooding zone ///!
    if(LP(iLayer)%Z(i,j).lt.GP%PermanentDryLimit.and.LP(iLayer)%Z(i,j).gt.-GP%PermanentDryLimit) then
        !/// wet -> dry ///!
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).gt.0.0.and.&
            LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j).lt.0.0.and.&
            LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j).le.GP%MinWaterDepth) then
            if(LP(iLayer)%Z(i,j).gt.0.0) then
                LP(iLayer)%H(2,i,j) = -LP(iLayer)%Z(i,j)
            else
                LP(iLayer)%H(2,i,j) = 0.0
            endif
        endif
        !/// dry -> wet/dry ///
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).le.0.0) then
            if(LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j).gt.0.0) then ! dry -> wet
                LP(iLayer)%H(2,i,j) = LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j)-LP(iLayer)%Z(i,j)
            else ! dry ->dry
                if(LP(iLayer)%Z(i,j).gt.0.0) then
                    LP(iLayer)%H(2,i,j) = -LP(iLayer)%Z(i,j)
                else
                    LP(iLayer)%H(2,i,j) = 0.0
                endif
            endif
        endif
    endif

endif

!/// store maximum and minimum elevation at all grids ///!
if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then
    LP(iLayer)%Hmax(i,j) = MAX(LP(iLayer)%Hmax(i,j), LP(iLayer)%H(2,i,j))
    LP(iLayer)%Hmin(i,j) = MIN(LP(iLayer)%Hmin(i,j), LP(iLayer)%H(2,i,j))
endif

end subroutine massCartesian



attributes(global) subroutine massSpherical(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  m1, m2, n1, n2, tmp1, tmp2
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// determine the computational domain ///
if(LP(iLayer)%Level.gt.1) then 
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
else
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY
endif

!/// solve mass equation within computational domain ///!
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    if(LP(iLayer)%Z(i,j).le.-GP%PermanentDryLimit) then
        LP(iLayer)%H(2,i,j) = 0.0
    else
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i,j)
        endif
        if(j.eq.1) then
            n1 = 0.0; tmp1 = COS((LP(iLayer)%ymin-0.5*LP(iLayer)%dy)*GP%PI/180.0)
        else
            n1 = LP(iLayer)%N(1,i,j-1); tmp1 = LP(iLayer)%CSY(j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            n2 = 0.0; tmp2 = COS((LP(iLayer)%ymax+0.5*LP(iLayer)%dy)*GP%PI/180.0)
        else
            n2 = LP(iLayer)%N(1,i,j); tmp2 = LP(iLayer)%CSY(j)
        endif
        LP(iLayer)%H(2,i,j) = LP(iLayer)%H(1,i,j) - LP(iLayer)%CS1(j)*(m2-m1) - &
            LP(iLayer)%CS2(j)*(n2*tmp2-n1*tmp1)
    endif
    !//// calculate inundation in flooding zone ///!
    if(LP(iLayer)%Z(i,j).lt.GP%PermanentDryLimit.and.LP(iLayer)%Z(i,j).gt.-GP%PermanentDryLimit) then
        !/// wet -> dry ///!
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).gt.0.0.and.&
            LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j).lt.0.0.and.&
            LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j).le.GP%MinWaterDepth) then
            if(LP(iLayer)%Z(i,j).gt.0.0) then
                LP(iLayer)%H(2,i,j) = -LP(iLayer)%Z(i,j)
            else
                LP(iLayer)%H(2,i,j) = 0.0
            endif
        endif
        !/// dry -> wet/dry ///
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).le.0.0) then
            if(LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j).gt.0.0) then ! dry -> wet
                LP(iLayer)%H(2,i,j) = LP(iLayer)%H(2,i,j)-LP(iLayer)%H(1,i,j)-LP(iLayer)%Z(i,j)
            else ! dry ->dry
                if(LP(iLayer)%Z(i,j).gt.0.0) then
                    LP(iLayer)%H(2,i,j) = -LP(iLayer)%Z(i,j)
                else
                    LP(iLayer)%H(2,i,j) = 0.0
                endif
            endif
        endif
    endif

endif

!/// store maximum and minimum elevation at all grids ///!
if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then
    LP(iLayer)%Hmax(i,j) = MAX(LP(iLayer)%Hmax(i,j), LP(iLayer)%H(2,i,j))
    LP(iLayer)%Hmin(i,j) = MIN(LP(iLayer)%Hmin(i,j), LP(iLayer)%H(2,i,j))
endif

end subroutine massSpherical



attributes(global) subroutine reconstructFlowDepth(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  z1, z2, h1, h2, m0, n0
integer*4       ::  i, j, s

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// estimate flow depth for flux component M ///!
if(i.le.LP(iLayer)%NX-1.and.j.le.LP(iLayer)%NY) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
    m0 = LP(iLayer)%M(1,i,j)
    call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
    if(s.eq.999) then
        LP(iLayer)%D_M(i,j) = 0.0
    elseif(s.eq.0) then
        if(m0.ge.0.0) then
            LP(iLayer)%D_M(i,j) = 0.5*(z1+z2) + h1
        else
            LP(iLayer)%D_M(i,j) = 0.5*(z1+z2) + h2
        endif
    else
        LP(iLayer)%D_M(i,j) = 0.5*(z1+z2) + MAX(h1,h2)
    endif
    LP(iLayer)%Sign_M(i,j) = s
endif

!/// estimate flow depth for flux component N ///!
if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY-1) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
    n0 = LP(iLayer)%N(1,i,j)
    call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
    if(s.eq.999) then
        LP(iLayer)%D_N(i,j) = 0.0
    elseif(s.eq.0) then
        if(n0.ge.0.0) then
            LP(iLayer)%D_N(i,j) = 0.5*(z1+z2) + h1
        else
            LP(iLayer)%D_N(i,j) = 0.5*(z1+z2) + h2
        endif
    else
        LP(iLayer)%D_N(i,j) = 0.5*(z1+z2) + MAX(h1,h2)
    endif
    LP(iLayer)%Sign_N(i,j) = s
endif

end subroutine reconstructFlowDepth



attributes(global) subroutine momentumLinearCartesian(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j, k, FluxSign
real(fp_kind)   ::  z1, z2, h1, h2
real(fp_kind)   ::  m0, m1, m2, m3, m4
real(fp_kind)   ::  n0, n1, n2, n3, n4
real(fp_kind)   ::  D0, MM, NN, Cf, Fx, Fy, phi

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!///calculate flux component M///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids in child layer
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%M(2,i,j) = 0.0
    else
        !///solve LSWE///!
        m0 = LP(iLayer)%M(1,i,j)
        D0 = LP(iLayer)%D_M(i,j)
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j)
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CC1*MIN(ABS(m0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%M(2,i,j) = phi*m0 + 0.5*(1.0-phi)*(m1+m2) - LP(iLayer)%CC3*LP(iLayer)%D_M(i,j)*(h2-h1)

        !/// bottom friction ///!
        if(j.ge.2) then
            n1 = LP(iLayer)%N(1,i,j-1); n2 = LP(iLayer)%N(1,i+1,j-1)
        else
            n1 = 0.0; n2 = 0.0
        endif
        if(j.le.LP(iLayer)%NY-1) then
            n3 = LP(iLayer)%N(1,i,j); n4 = LP(iLayer)%N(1,i+1,j)
        else
            n3 = 0.0; n4 = 0.0
        endif
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = m0**2; NN = (0.25*(n1+n2+n3+n4))**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i+1,j))
            else
                Cf = GP%MANNING
            endif
            Fx = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*m0
            if(ABS(LP(iLayer)%dt*Fx).gt.ABS(m0)) Fx = m0/LP(iLayer)%dt
            LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) - LP(iLayer)%dt*Fx
        endif
        !///check if the direction of M is right///!
        if(FluxSign.ne.0.and.LP(iLayer)%M(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%M(2,i,j) = 0.0
    endif
endif

!///calculate flux component N///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer 
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids on child layers
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%N(2,i,j) = 0.0
    else
        !///solve LSWE///!
        n0 = LP(iLayer)%N(1,i,j)
        D0 = LP(iLayer)%D_N(i,j)
        if(j.eq.1) then
            n1 = 0.0
        else
            n1 = LP(iLayer)%N(1,i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n2 = 0.0
        else
            n2 = LP(iLayer)%N(1,i,j+1)
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CC2*MIN(ABS(n0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%N(2,i,j) = phi*n0 + 0.5*(1.0-phi)*(n1+n2) - LP(iLayer)%CC4*LP(iLayer)%D_N(i,j)*(h2-h1)

        !/// bottom friction ///!
        if(i.ge.2) then
            m1 = LP(iLayer)%M(1,i-1,j); m2 = LP(iLayer)%M(1,i-1,j+1)
        else
            m1 = 0.0; m2 = 0.0
        endif
        if(i.le.LP(iLayer)%NX-1) then
            m3 = LP(iLayer)%M(1,i,j); m4 = LP(iLayer)%M(1,i,j+1)
        else
            m3 = 0.0; m4 = 0.0
        endif
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = (0.25*(m1+m2+m3+m4))**2; NN = n0**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i,j+1))
            else
                Cf = GP%MANNING
            endif
            Fy = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*n0
            if(ABS(LP(iLayer)%dt*Fy).gt.ABS(n0)) Fy = n0/LP(iLayer)%dt
            LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%dt*Fy
        endif
        !/// check if the direction of N is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%N(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%N(2,i,j) = 0.0
    endif
endif

end subroutine momentumLinearCartesian



attributes(global) subroutine momentumLinearSpherical(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j, k, FluxSign
real(fp_kind)   ::  z1, z2, h1, h2, flux
real(fp_kind)   ::  m0, m1, m2, m3, m4
real(fp_kind)   ::  n0, n1, n2, n3, n4
real(fp_kind)   ::  D0, MM, NN, Cf, Fx, Fy, phi

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!///calculate flux component M///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids in child layer
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%M(2,i,j) = 0.0
    else
        !///solve LSWE///!
        m0 = LP(iLayer)%M(1,i,j)
        D0 = LP(iLayer)%D_M(i,j)
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j)
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CS1(j)*MIN(ABS(m0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%M(2,i,j) = phi*m0 + 0.5*(1.0-phi)*(m1+m2) - LP(iLayer)%CS3(j)*LP(iLayer)%D_M(i,j)*(h2-h1)

        !/// Coriolis force ///!
        if(j.eq.1) then
            n1 = 0.0; n2 = 0.0
        else
            n1 = LP(iLayer)%N(1,i,j-1); n2 = LP(iLayer)%N(1,i+1,j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            n3 = 0.0; n4 = 0.0
        else
            n3 = LP(iLayer)%N(1,i,j); n4 = LP(iLayer)%N(1,i+1,j)
        endif
        flux = 0.25*(n1+n2+n3+n4)
        LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) + LP(iLayer)%CPX(j)*flux

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = m0**2; NN = (0.25*(n1+n2+n3+n4))**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i+1,j))
            else
                Cf = GP%MANNING
            endif
            Fx = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*m0
            if(ABS(LP(iLayer)%dt*Fx).gt.ABS(m0)) Fx = m0/LP(iLayer)%dt
            LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) - LP(iLayer)%dt*Fx
        endif
        !/// check if the direction of M is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%M(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%M(2,i,j) = 0.0
    endif
endif

!///calculate flux component N///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer 
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids on child layers
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%N(2,i,j) = 0.0
    else
        !///solve LSWE///!
        n0 = LP(iLayer)%N(1,i,j)
        D0 = LP(iLayer)%D_N(i,j)
        if(j.eq.1) then
            n1 = 0.0
        else
            n1 = LP(iLayer)%N(1,i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n2 = 0.0
        else
            n2 = LP(iLayer)%N(1,i,j+1)
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CS5*MIN(ABS(n0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%N(2,i,j) = phi*n0 + 0.5*(1.0-phi)*(n1+n2) - LP(iLayer)%CS4*LP(iLayer)%D_N(i,j)*(h2-h1)

        !/// Coriolis force ///!
        if(i.eq.1) then
            m1 = 0.0; m2 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j); m2 = LP(iLayer)%M(1,i-1,j+1)
        endif
        if(i.eq.LP(iLayer)%NX) then
            m3 = 0.0; m4 = 0.0
        else
            m3 = LP(iLayer)%M(1,i,j); m4 = LP(iLayer)%M(1,i,j+1)
        endif
        flux = 0.25*(m1+m2+m3+m4)
        LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%CPY(j)*flux

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = (0.25*(m1+m2+m3+m4))**2; NN = n0**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i,j+1))
            else
                Cf = GP%MANNING
            endif
            Fy = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*n0
            if(ABS(LP(iLayer)%dt*Fy).gt.ABS(n0)) Fy = n0/LP(iLayer)%dt
            LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%dt*Fy
        endif
        !/// check if the direction of N is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%N(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%N(2,i,j) = 0.0
    endif
endif

end subroutine momentumLinearSpherical



attributes(global) subroutine momentumNonlinearCartesian(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j, FluxSign
real(fp_kind)   ::  z1, z2, h1, h2
real(fp_kind)   ::  D0, D1, D2, D3, D5, Dlimit
real(fp_kind)   ::  m0, m1, m2, m3, m4, m5, m6, m7, m8
real(fp_kind)   ::  n0, n1, n2, n3, n4, n5, n6, n7, n8
real(fp_kind)   ::  MU1, MU2, NU1, NU2, NV1, NV2, MV1, MV2
real(fp_kind)   ::  MM, NN, Cf, Fx, Fy, phi

Dlimit = 1E-3
i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!///calculate flux component M///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids in child layer
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%M(2,i,j) = 0.0
    else
        !///solve NSWE///!
        MU1 = 0.0; MU2 = 0.0; NU1 = 0.0; NU2 = 0.0
        m0 = LP(iLayer)%M(1,i,j); D0 = LP(iLayer)%D_M(i,j)
        if(i.eq.1) then
            m1 = 0.0; D1 = D0
        else
            m1 = LP(iLayer)%M(1,i-1,j); D1 = LP(iLayer)%D_M(i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0; D2 = D0
        else
            m2 = LP(iLayer)%M(1,i+1,j); D2 = LP(iLayer)%D_M(i+1,j)
        endif
        if(j.eq.1) then
            m3 = 0.0; D3 = D0; n3 = 0.0; n4 = 0.0
        else
            m3 = LP(iLayer)%M(1,i,j-1); D3 = LP(iLayer)%D_M(i,j-1)
            n3 = LP(iLayer)%N(1,i,j-1); n4 = LP(iLayer)%N(1,i+1,j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            m5 = 0.0; D5 = D0; n0 = 0.0; n2 = 0.0
        else
            m5 = LP(iLayer)%M(1,i,j+1); D5 = LP(iLayer)%D_M(i,j+1)
            n0 = LP(iLayer)%N(1,i,j);   n2 = LP(iLayer)%N(1,i+1,j)
        endif
        !/// extra terms n5, n6, n7, n8 ///!
        if(j.le.2) then
            n7 = 0.0; n8 = 0.0
        else
            n7 = LP(iLayer)%N(1,i,j-2); n8 = LP(iLayer)%N(1,i+1,j-2)
        endif
        if(j.ge.LP(iLayer)%NY-1) then
            n5 = 0.0; n6 = 0.0
        else
            n5 = LP(iLayer)%N(1,i,j+1); n6 = LP(iLayer)%N(1,i+1,j+1)
        endif
        !/// upwind scheme ///!
        if(m0.ge.0.0) then
            if(D1.gt.Dlimit) MU1 = m1**2/D1
            if(D0.gt.Dlimit) MU2 = m0**2/D0
        else
            if(D0.gt.Dlimit) MU1 = m0**2/D0
            if(D2.gt.Dlimit) MU2 = m2**2/D2
        endif
        if(n0+n2+n3+n4.ge.0.0) then
            if(D3.gt.Dlimit) NU1 = 0.25*m3*(n3+n4+n7+n8)/D3
            if(D0.gt.Dlimit) NU2 = 0.25*m0*(n0+n2+n3+n4)/D0
        else
            if(D0.gt.Dlimit) NU1 = 0.25*m0*(n0+n2+n3+n4)/D0
            if(D5.gt.Dlimit) NU2 = 0.25*m5*(n0+n2+n5+n6)/D5
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CC1*MIN(ABS(m0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%M(2,i,j) = phi*m0 + 0.5*(1.0-phi)*(m1+m2) - LP(iLayer)%CC3*D0*(h2-h1) &
                            - LP(iLayer)%CC1*(MU2-MU1) - LP(iLayer)%CC2*(NU2-NU1)

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = m0**2; NN = (0.25*(n0+n2+n3+n4))**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i+1,j))
            else
                Cf = GP%MANNING
            endif
            Fx = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*m0
            if(ABS(LP(iLayer)%dt*Fx).gt.ABS(m0)) Fx = m0/LP(iLayer)%dt
            LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) - LP(iLayer)%dt*Fx
        endif               
        !/// check if the direction of M is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%M(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%M(2,i,j) = 0.0
    endif
endif


!///calculate flux component N///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer 
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids on child layers
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%N(2,i,j) = 0.0
    else
        !///solve NSWE///!
        NV1 = 0.0; NV2 = 0.0; MV1 = 0.0; MV2 = 0.0
        n0 = LP(iLayer)%N(1,i,j); D0 = LP(iLayer)%D_N(i,j)
        if(j.eq.1) then
            n3 = 0.0; D3 = D0
        else
            n3 = LP(iLayer)%N(1,i,j-1); D3 = LP(iLayer)%D_N(i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n5 = 0.0; D5 = D0
        else
            n5 = LP(iLayer)%N(1,i,j+1); D5 = LP(iLayer)%D_N(i,j+1)
        endif
        if(i.eq.1) then
            n1 = 0.0; D1 = D0; m1 = 0.0; m4 = 0.0
        else
            n1 = LP(iLayer)%N(1,i-1,j); D1 = LP(iLayer)%D_N(i-1,j)
            m1 = LP(iLayer)%M(1,i-1,j); m4 = LP(iLayer)%M(1,i-1,j+1)
        endif
        if(i.eq.LP(iLayer)%NX) then
            n2 = 0.0; D2 = D0; m0 = 0.0; m5 = 0.0
        else
            n2 = LP(iLayer)%N(1,i+1,j); D2 = LP(ilayer)%D_N(i+1,j)
            m0 = LP(iLayer)%M(1,i,j); m5 = LP(iLayer)%M(1,i,j+1)
        endif
        !/// extra terms m2, m6, m7, m8///!
        if(i.le.2) then
            m7 = 0.0; m8 = 0.0
        else
            m7 = LP(iLayer)%M(1,i-2,j); m8 = LP(iLayer)%M(1,i-2,j+1)
        endif
        if(i.ge.LP(iLayer)%NX-1) then
            m2 = 0.0; m6 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j); m6 = LP(iLayer)%M(1,i+1,j+1)
        endif
        !/// upwind scheme ///!
        if(n0.ge.0.0) then
            if(D3.gt.Dlimit) NV1 = n3**2/D3
            if(D0.gt.Dlimit) NV2 = n0**2/D0
        else
            if(D0.gt.Dlimit) NV1 = n0**2/D0
            if(D5.gt.Dlimit) NV2 = n5**2/D5
        endif
        if(m0+m1+m4+m5.ge.0.0) then
            if(D1.gt.Dlimit) MV1 = 0.25*n1*(m1+m4+m7+m8)/D1
            if(D0.gt.Dlimit) MV2 = 0.25*n0*(m0+m1+m4+m5)/D0
        else
            if(D0.gt.Dlimit) MV1 = 0.25*n0*(m0+m1+m4+m5)/D0
            if(D2.gt.Dlimit) MV2 = 0.25*n2*(m0+m2+m5+m6)/D2
        endif
        
        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CC2*MIN(ABS(n0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%N(2,i,j) = phi*n0 + 0.5*(1.0-phi)*(n3+n5) - LP(iLayer)%CC4*D0*(h2-h1) &
                            - LP(iLayer)%CC2*(NV2-NV1) - LP(iLayer)%CC1*(MV2-MV1)

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then 
            MM = (0.25*(m0+m1+m4+m5))**2; NN = n0**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i,j+1))
            else
                Cf = GP%MANNING
            endif
            Fy = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*n0
            if(ABS(LP(iLayer)%dt*Fy).gt.ABS(n0)) Fy = n0/LP(iLayer)%dt
            LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%dt*Fy
        endif
        !/// check if the direction of N is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%N(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%N(2,i,j) = 0.0
    endif
endif

end subroutine momentumNonlinearCartesian



attributes(global) subroutine momentumNonlinearSpherical(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j, FluxSign
real(fp_kind)   ::  z1, z2, h1, h2
real(fp_kind)   ::  D0, D1, D2, D3, D5, Dlimit
real(fp_kind)   ::  m0, m1, m2, m3, m4, m5, m6, m7, m8
real(fp_kind)   ::  n0, n1, n2, n3, n4, n5, n6, n7, n8
real(fp_kind)   ::  MU0, MU1, MU2, NU0, NU1, NU2 
real(fp_kind)   ::  NV0, NV1, NV2, MV1, MV2  
real(fp_kind)   ::  flux, MM, NN, Fx, Fy, Cf, phi

Dlimit = 1E-3
i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!///calculate flux component M///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids in child layer
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%M(2,i,j) = 0.0
    else
        !///solve NSWE///!
        MU1 = 0.0; MU2 = 0.0; NU1 = 0.0; NU2 = 0.0; NU0 = 0.0
        m0 = LP(iLayer)%M(1,i,j); D0 = LP(iLayer)%D_M(i,j)
        if(i.eq.1) then
            m1 = 0.0; D1 = D0
        else
            m1 = LP(iLayer)%M(1,i-1,j); D1 = LP(iLayer)%D_M(i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0; D2 =  D0
        else
            m2 = LP(iLayer)%M(1,i+1,j); D2 = LP(iLayer)%D_M(i+1,j)
        endif
        if(j.eq.1) then
            m3 = 0.0; D3 = D0; n3 = 0.0; n4 = 0.0
        else
            m3 = LP(iLayer)%M(1,i,j-1); D3 = LP(iLayer)%D_M(i,j-1)
            n3 = LP(iLayer)%N(1,i,j-1); n4 = LP(iLayer)%N(1,i+1,j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            m5 = 0.0; D5 = D0; n0 = 0.0; n2 = 0.0
        else
            m5 = LP(iLayer)%M(1,i,j+1); D5 = LP(iLayer)%D_M(i,j+1)
            n0 = LP(iLayer)%N(1,i,j); n2 = LP(iLayer)%N(1,i+1,j)
        endif
        !/// extra terms n5, n6, n7, n8 ///!
        if(j.le.2) then
            n7 = 0.0; n8 = 0.0
        else
            n7 = LP(iLayer)%N(1,i,j-2); n8 = LP(iLayer)%N(1,i+1,j-2)
        endif
        if(j.ge.LP(iLayer)%NY-1) then
            n5 = 0.0; n6 = 0.0
        else
            n5 = LP(iLayer)%N(1,i,j+1); n6 = LP(iLayer)%N(1,i+1,j+1)
        endif
        !/// upwind scheme ///!
        if(m0.ge.0.0) then
            if(D1.gt.Dlimit) MU1 = m1**2/D1
            if(D0.gt.Dlimit) MU2 = m0**2/D0
        else
            if(D0.gt.Dlimit) MU1 = m0**2/D0
            if(D2.gt.Dlimit) MU2 = m2**2/D2
        endif
        if(n0+n2+n3+n4.ge.0.0) then
            if(D3.gt.Dlimit) NU1 = 0.25*m3*(n3+n4+n7+n8)/D3
            if(D0.gt.Dlimit) NU2 = 0.25*m0*(n0+n2+n3+n4)/D0
        else
            if(D0.gt.Dlimit) NU1 = 0.25*m0*(n0+n2+n3+n4)/D0
            if(D5.gt.Dlimit) NU2 = 0.25*m5*(n0+n2+n5+n6)/D5
        endif
        if(D0.gt.Dlimit) NU0 = 0.25*m0*(n0+n2+n3+n4)/D0

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CS1(j)*MIN(ABS(m0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%M(2,i,j) = phi*m0 + 0.5*(1.0-phi)*(m1+m2) - LP(iLayer)%CS3(j)*D0*(h2-h1) &
            -LP(iLayer)%CS1(j)*(MU2-MU1) - LP(iLayer)%CS5*(NU2-NU1) + 2.0*LP(iLayer)%CS6(j)*NU0

        !/// Coriolis force ///!
        flux = 0.25*(n0+n2+n3+n4)
        LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) + LP(iLayer)%CPX(j)*flux

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then
            MM = m0**2; NN = (0.25*(n0+n2+n3+n4))**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i+1,j))
            else
                Cf = GP%MANNING
            endif
            Fx = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*m0
            if(ABS(LP(iLayer)%dt*Fx).gt.ABS(m0)) Fx = m0/LP(iLayer)%dt
            LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) - LP(iLayer)%dt*Fx
        endif
        !/// check if the direction of M is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%M(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%M(2,i,j) = 0.0
    endif
endif

!///calculate flux component N///!
if(LP(iLayer)%Level.eq.1) then !calculate all grids in top layer 
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
elseif(LP(iLayer)%Level.gt.1) then !do not calculate GHOST grids on child layers
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif
if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then
    z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
    z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
    call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, FluxSign)
    if(FluxSign.eq.999) then
        LP(iLayer)%N(2,i,j) = 0.0
    else
        !///solve NSWE///!
        NV1 = 0.0; NV2 = 0.0; MV1 = 0.0; MV2 = 0.0; NV0 = 0.0; MU0 = 0.0
        n0 = LP(iLayer)%N(1,i,j); D0 = LP(iLayer)%D_N(i,j)
        if(j.eq.1) then
            n3 = 0.0; D3 = D0
        else
            n3 = LP(iLayer)%N(1,i,j-1); D3 = LP(iLayer)%D_N(i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n5 = 0.0; D5 = D0
        else
            n5 = LP(iLayer)%N(1,i,j+1); D5 = LP(iLayer)%D_N(i,j+1)
        endif
        if(i.eq.1) then
            n1 = 0.0; D1 = D0; m1 = 0.0; m4 = 0.0
        else
            n1 = LP(iLayer)%N(1,i-1,j); D1 = LP(iLayer)%D_N(i-1,j)
            m1 = LP(iLayer)%M(1,i-1,j); m4 = LP(iLayer)%M(1,i-1,j+1)
        endif
        if(i.eq.LP(iLayer)%NX) then
            n2 = 0.0; D2 = D0; m0 = 0.0; m5 = 0.0
        else
            n2 = LP(iLayer)%N(1,i+1,j); D2 = LP(ilayer)%D_N(i+1,j)
            m0 = LP(iLayer)%M(1,i,j); m5 = LP(iLayer)%M(1,i,j+1)
        endif
        !/// extra terms m2, m6, m7, m8 ///!
        if(i.le.2) then
            m7 = 0.0; m8 = 0.0
        else
            m7 = LP(iLayer)%M(1,i-2,j); m8 = LP(iLayer)%M(1,i-2,j+1)
        endif
        if(i.ge.LP(iLayer)%NX-1) then
            m2 = 0.0; m6 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j); m6 = LP(iLayer)%M(1,i+1,j+1)
        endif
        !/// upwind scheme ///!
        if(n0.ge.0.0) then
            if(D3.gt.Dlimit) NV1 = n3**2/D3
            if(D0.gt.Dlimit) NV2 = n0**2/D0
        else
            if(D0.gt.Dlimit) NV1 = n0**2/D0
            if(D5.gt.Dlimit) NV2 = n5**2/D5
        endif
        if(m0+m1+m4+m5.ge.0.0) then
            if(D1.gt.Dlimit) MV1 = 0.25*n1*(m1+m4+m7+m8)/D1
            if(D0.gt.Dlimit) MV2 = 0.25*n0*(m0+m1+m4+m5)/D0
        else
            if(D0.gt.Dlimit) MV1 = 0.25*n0*(m0+m1+m4+m5)/D0
            if(D2.gt.Dlimit) MV2 = 0.25*n2*(m0+m2+m5+m6)/D2
        endif
        if(D0.gt.Dlimit) then
            MU0 = (0.25*(m0+m1+m4+m5))**2/D0
            NV0 = n0**2/D0
        endif

        !///flux-centered///!
        if(LP(iLayer)%FluxCenter.eq.0) then
            phi = GP%centerWeighting0
        else
            phi = 1.0 - LP(iLayer)%CS5*MIN(ABS(n0/MAX(D0,GP%MinWaterDepth)),SQRT(GP%GRAV*D0))
        endif
        LP(iLayer)%N(2,i,j) = phi*n0 + 0.5*(1.0-phi)*(n3+n5) - LP(iLayer)%CS4*D0*(h2-h1) &
            -LP(iLayer)%CS5*(NV2-NV1) - LP(iLayer)%CS7(j)*(MV2-MV1) - LP(iLayer)%CS8(j)*(MU0-NV0)

        !/// Coriolis force ///!
        flux = 0.25*(m0+m1+m4+m5)
        LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%CPY(j)*flux

        !/// bottom friction ///!
        if(D0.gt.GP%FrictionDepthLimit) then 
            MM = (0.25*(m0+m1+m4+m5))**2; NN = n0**2
            if(GP%BoundaryConditionType.eq.2.and.iLayer.eq.GP%TopLayer) then
                Cf = GP%MANNING + 0.5*(LP(iLayer)%SpongeMANNING(i,j)+LP(iLayer)%SpongeMANNING(i,j+1))
            else
                Cf = GP%MANNING
            endif
            Fy = GP%GRAV*Cf**2/(D0**2.33)*SQRT(MM+NN)*n0
            if(ABS(LP(iLayer)%dt*Fy).gt.ABS(n0)) Fy = n0/LP(iLayer)%dt
            LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) - LP(iLayer)%dt*Fy
        endif
        !/// check if the direction of N is right ///!
        if(FluxSign.ne.0.and.LP(iLayer)%N(2,i,j)*FluxSign.lt.0.0) LP(iLayer)%N(2,i,j) = 0.0
    endif
endif

end subroutine momentumNonlinearSpherical


end module SWE_kernels