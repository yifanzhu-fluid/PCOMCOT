module pcomcotLIB_device

use VariableDefination
    
contains

attributes(device) subroutine checkFluxDirection(dryLimit,z1,z2,h1,h2,FluxSign)
! This subroutine checks the reasonble situations of flux M/N
! FluxSign can be {-2,-1,0,1,2,999}, with the same definition as Sign_M/N in LayerParameters
! dryLimit      : permanent dry limit defined in GlobalParametes
! z1,z2,h1,h2   : water depth and elevation on both sides of flux M/N
!  0 : water can flow in both directions
! 999: water cannot flow
!  1 : water can only flow in positive direction, and from higher to lower
!  2 : water can only flow in positive direction, and from lower to higher
! -1 : water can only flow in negative direction, and from higher to lower
! -2 : water can only flow in negative direction, and from lower to higher
! If water can only flow in one direction, values of h1 and h2 are modified for momentum equation
implicit NONE
real(fp_kind), intent(in)       ::  dryLimit, z1, z2
real(fp_kind), intent(inout)    ::  h1, h2          
integer*4, intent(out)          ::  FluxSign
        
if(z1.le.-dryLimit.or.z2.le.-dryLimit) then
    FluxSign = 999; return
endif
        
if(z1+h1.le.0.0.or.z2+h2.le.0.0) then
    if(z1+h1.le.0.0.and.z2+h2.le.0.0) then
        FluxSign = 999; return
    elseif(z1.gt.z2.and.z1+h1.gt.0.0.and.z2+h1.le.0.0) then
        FluxSign = 999; return
    elseif(z2.gt.z1.and.z2+h2.gt.0.0.and.z1+h2.le.0.0) then
        FluxSign = 999; return
    endif
endif
        
if(z1.le.z2.and.z1+h1.gt.0.0.and.z1+h2.le.0.0) then
    FluxSign = 1; h2 = -z1
elseif(z1.ge.z2.and.z2+h2.le.0.0.and.z2+h1.gt.0.0) then
    FluxSign = 2; h2 = -z2
elseif(z2.le.z1.and.z2+h2.gt.0.0.and.z2+h1.le.0.0) then
    FluxSign = -1; h1 = -z2
elseif(z2.ge.z1.and.z1+h1.le.0.0.and.z1+h2.gt.0.0) then
    FluxSign = -2; h1 = -z1
else
    FluxSign = 0
endif
        
end subroutine checkFluxDirection

    
attributes(device) subroutine interpDeviceData(GP, LP, iLayer, iFlag, x, y, val)
!! iFlag = -1,-2,-3: interpolate H,M,N(1,i,j)
!! iFlag = 1,2,3: interpolate H,M,N(2,i,j)
!! iFlag = 0: interpolate Z(i,j)
!! iFlag = 4: interpolate Q(i,j)
!! iFlag = 5: interpolate Brkv(i,j)
!! iFlag = 6: interpolate BrkAge(i,j)
implicit NONE
type(DeviceGlobalParameters)  ::  GP
type(DeviceLayerParameters) ::  LP(99)
integer*4       ::  iLayer, iFlag, iTime
real(fp_kind)   ::  x, y, val
integer*4       ::  ii, jj, ii2, jj2
integer*4       ::  i1, i2, i3, i4
real(fp_kind)   ::  x1, y1, x2, y2, invx, invy
real(fp_kind)   ::  z1, z2, z3, z4
        
if(iFlag.lt.0) then
    iTime = 1
else
    iTime = 2
endif
if(iFlag.eq.0) then
    ii  = FLOOR((x-LP(iLayer)%X(1))/LP(iLayer)%dx)+1
    jj  = FLOOR((y-LP(iLayer)%Y(1))/LP(iLayer)%dy)+1
    ii2 = MIN(ii+1, LP(iLayer)%NX)
    jj2 = MIN(jj+1, LP(iLayer)%NY)
    z1  = LP(iLayer)%Z(ii,jj)
    z2  = LP(iLayer)%Z(ii2,jj)
    z3  = LP(iLayer)%Z(ii,jj2)
    z4  = LP(iLayer)%Z(ii2,jj2)
    x1  = LP(iLayer)%X(ii);  y1 = LP(iLayer)%Y(jj)
    x2  = LP(iLayer)%X(ii2); y2 = LP(iLayer)%Y(jj2)
elseif(iFlag.eq.-1.or.iFlag.eq.1) then
    ii  = FLOOR((x-LP(iLayer)%X(1))/LP(iLayer)%dx)+1
    jj  = FLOOR((y-LP(iLayer)%Y(1))/LP(iLayer)%dy)+1
    ii2 = MIN(ii+1, LP(iLayer)%NX)
    jj2 = MIN(jj+1, LP(iLayer)%NY)
    z1  = LP(iLayer)%H(iTime,ii,jj)
    z2  = LP(iLayer)%H(iTime,ii2,jj)
    z3  = LP(iLayer)%H(iTime,ii,jj2)
    z4  = LP(iLayer)%H(iTime,ii2,jj2)
    x1  = LP(iLayer)%X(ii);  y1 = LP(iLayer)%Y(jj)
    x2  = LP(iLayer)%X(ii2); y2 = LP(iLayer)%Y(jj2)
elseif(iFlag.eq.-2.or.iFlag.eq.2) then
    ii  = FLOOR((x-LP(iLayer)%X(1)-LP(iLayer)%dx*0.5)/LP(iLayer)%dx)+1
    jj  = FLOOR((y-LP(iLayer)%Y(1))/LP(iLayer)%dy)+1
    ii2 = MIN(ii+1, LP(iLayer)%NX-1)
    jj2 = MIN(jj+1, LP(iLayer)%NY)
    if(ii.eq.0) then
        ii = 1; ii2 = 1
    endif
    z1 = LP(iLayer)%M(iTime,ii,jj)
    z2 = LP(iLayer)%M(iTime,ii2,jj)
    z3 = LP(iLayer)%M(iTime,ii,jj2)
    z4 = LP(iLayer)%M(iTime,ii2,jj2)
    x1 = LP(iLayer)%X(ii)+LP(iLayer)%dx*0.5;  y1 = LP(iLayer)%Y(jj)
    x2 = LP(iLayer)%X(ii2)+LP(iLayer)%dx*0.5; y2 = LP(iLayer)%Y(jj2)           
elseif(iFlag.eq.-3.or.iFlag.eq.3) then
    ii  = FLOOR((x-LP(iLayer)%X(1))/LP(iLayer)%dx)+1
    jj  = FLOOR((y-LP(iLayer)%Y(1)-LP(iLayer)%dy*0.5)/LP(iLayer)%dy)+1
    ii2 = MIN(ii+1, LP(iLayer)%NX)
    jj2 = MIN(jj+1, LP(iLayer)%NY-1)
    if(jj.eq.0) then
        jj = 1; jj2 = 1
    endif
    z1 = LP(iLayer)%N(iTime,ii,jj)
    z2 = LP(iLayer)%N(iTime,ii2,jj)
    z3 = LP(iLayer)%N(iTime,ii,jj2)
    z4 = LP(iLayer)%N(iTime,ii2,jj2)
    x1 = LP(iLayer)%X(ii);  y1 = LP(iLayer)%Y(jj)+0.5*LP(iLayer)%dy
    x2 = LP(iLayer)%X(ii2); y2 = LP(iLayer)%Y(jj2)+0.5*LP(iLayer)%dy
else
    ii  = FLOOR((x-LP(iLayer)%X(1))/LP(iLayer)%dx)+1
    jj  = FLOOR((y-LP(iLayer)%Y(1))/LP(iLayer)%dy)+1
    ii2 = MIN(ii+1, LP(iLayer)%NX)
    jj2 = MIN(jj+1, LP(iLayer)%NY)
    x1 = LP(iLayer)%X(ii);  y1 = LP(iLayer)%Y(jj)
    x2 = LP(iLayer)%X(ii2); y2 = LP(iLayer)%Y(jj2)
    if(iFlag.eq.4) then
        z1 = LP(iLayer)%Q(ii,jj);  z2 = LP(iLayer)%Q(ii2,jj)
        z3 = LP(iLayer)%Q(ii,jj2); z4 = LP(iLayer)%Q(ii2,jj2)
    elseif(iFlag.eq.5) then
        z1 = LP(iLayer)%Brkv(ii,jj);  z2 = LP(iLayer)%Brkv(ii2,jj)
        z3 = LP(iLayer)%Brkv(ii,jj2); z4 = LP(iLayer)%Brkv(ii2,jj2)
    elseif(iFlag.eq.6) then
        z1 = LP(iLayer)%BrkAge(ii,jj);  z2 = LP(iLayer)%BrkAge(ii2,jj)
        z3 = LP(iLayer)%BrkAge(ii,jj2); z4 = LP(iLayer)%BrkAge(ii2,jj2)
    endif
endif
                    
i1 = 1; i2 = 1; i3 = 1; i4 = 1
if(iFlag.eq.1.or.iFlag.eq.-1.or.(iFlag.ge.4.and.iFlag.le.6)) then
    if(LP(iLayer)%Z(ii,jj)+LP(iLayer)%H(iTime,ii,jj).le.0.0) i1 = 0
    if(LP(iLayer)%Z(ii2,jj)+LP(iLayer)%H(iTime,ii2,jj).le.0.0) i2 = 0
    if(LP(iLayer)%Z(ii,jj2)+LP(iLayer)%H(iTime,ii,jj2).le.0.0) i3 = 0
    if(LP(iLayer)%Z(ii2,jj2)+LP(iLayer)%H(iTime,ii2,jj2).le.0.0) i4 = 0
    if(i1.eq.0.and.i2.eq.0.and.i3.eq.0.and.i4.eq.0) then
        i1 = 1; z1 = 0.0
    endif
elseif(iFlag.ne.0) then
    if(LP(iLayer)%Z(ii,jj).le.-GP%PermanentDryLimit) i1 = 0
    if(LP(iLayer)%Z(ii2,jj).le.-GP%PermanentDryLimit) i2 = 0
    if(LP(iLayer)%Z(ii,jj2).le.-GP%PermanentDryLimit) i3 = 0
    if(LP(iLayer)%Z(ii2,jj2).le.-GP%PermanentDryLimit) i4 = 0
    if(i1.eq.0.and.i2.eq.0.and.i3.eq.0.and.i4.eq.0) then
        i1 = 1; z1 = 0.0
    endif
endif
if(i1.eq.1.and.i2.eq.0.and.i3.eq.0.and.i4.eq.0) then
    ii2 = ii; jj2 = jj
elseif(i1.eq.0.and.i2.eq.1.and.i3.eq.0.and.i4.eq.0) then
    ii = ii2; jj2 = jj; z1 = z2
elseif(i1.eq.0.and.i2.eq.0.and.i3.eq.1.and.i4.eq.0) then
    ii2 = ii; jj = jj2; z1 = z3
elseif(i1.eq.0.and.i2.eq.0.and.i3.eq.0.and.i4.eq.1) then
    ii = ii2; jj = jj2; z1 = z4
elseif(i1.eq.1.and.i2.eq.1.and.i3.eq.0.and.i4.eq.0) then
    jj2 = jj;
elseif(i1.eq.1.and.i2.eq.0.and.i3.eq.1.and.i4.eq.0) then
    ii2 = ii;
elseif(i1.eq.0.and.i2.eq.1.and.i3.eq.0.and.i4.eq.1) then
    ii = ii2; z1 = z2; z3 = z4
elseif(i1.eq.0.and.i2.eq.0.and.i3.eq.1.and.i4.eq.1) then
    jj = jj2; z1 = z3; z2 = z4
elseif(i1.eq.1.and.i2.eq.0.and.i3.eq.0.and.i4.eq.1) then
    jj2 = jj; z2 = z4
elseif(i1.eq.0.and.i2.eq.1.and.i3.eq.1.and.i4.eq.0) then
    jj2 = jj; z1 = z3
elseif((i1.eq.0.or.i2.eq.0).and.i3.eq.1.and.i4.eq.1) then
    jj = jj2; z1 = z3; z2 = z4
elseif(i1.eq.1.and.i2.eq.1.and.(i3.eq.0.or.i4.eq.0)) then
    jj2 = jj
endif
        
if(ii.ne.ii2) invx = 1.0/(x2-x1)
if(jj.ne.jj2) invy = 1.0/(y2-y1)
if(ii.eq.ii2.or.jj.eq.jj2) then
    if(ii.eq.ii2.and.jj.eq.jj2) then
        val = z1
    elseif(ii.eq.ii2) then
        val = -z1*(y-y2)*invy+z3*(y-y1)*invy
    else
        val = -z1*(x-x2)*invx+z2*(x-x1)*invx
    endif
else
    val = z1*(x2-x)*(y2-y)+z2*(x-x1)*(y2-y)+z3*(x2-x)*(y-y1)+z4*(x-x1)*(y-y1)
    val = val*invx*invy
endif
        
end subroutine interpDeviceData


attributes(device) subroutine interp2D_linear(V, X, Y, xlen, ylen, xq, yq, val)
!Find the value of function V = V(x,y) at the query point (xq,yq)
!(X,Y): points at which the function is defined; V: function values at (X,Y)
!(xq,yq): query point; val: function value at (xq,yq)
!xlen, ylen: data length of X and Y
implicit NONE
real(fp_kind), intent(in)   ::  V(xlen,ylen), X(xlen), Y(ylen), xq, yq
real(fp_kind), intent(out)  ::  val
integer*4, intent(in)       ::  xlen, ylen
integer*4       ::  i, j, ileft, iright, jleft, jright
integer*4       ::  ii1, ii2, jj1, jj2
real(fp_kind)   ::  x1, x2, y1, y2, invx, invy
real(fp_kind)   ::  v1, v2, v3, v4 

if(xq.le.X(1)) then
    ii1 = 1; ii2 = ii1
elseif(xq.ge.X(xlen)) then
    ii1 = xlen; ii2 = ii1
else
    i = xlen/2; ileft = 1; iright = xlen
    do
        if((xq.ge.X(i)).and.(xq.le.X(i+1))) exit
        if(xq.lt.X(i)) then
            iright = i; i = (ileft+iright)/2
        else
            ileft = i; i = (ileft+iright)/2
        endif
    enddo
    ii1 = i; ii2 = i+1
endif

if(yq.le.Y(1)) then
    jj1 = 1; jj2 = jj1
elseif(yq.ge.Y(ylen)) then
    jj1 = ylen; jj2 = jj1
else
    j = ylen/2; jleft = 1; jright = ylen
    do
        if((yq.ge.Y(j)).and.(yq.le.Y(j+1))) exit
        if(yq.lt.Y(j)) then
            jright = j; j = (jleft+jright)/2
        else
            jleft = j; j = (jleft+jright)/2
        endif
    enddo
    jj1 = j; jj2 = j+1
endif

x1 = X(ii1); x2 = X(ii2)
y1 = Y(jj1); y2 = Y(jj2)
v1 = V(ii1, jj1); v2 = V(ii2,jj1)
v3 = V(ii1,jj2); v4 = V(ii2,jj2)
if(ii1.ne.ii2) invx = 1.0/(x2-x1)
if(jj1.ne.jj2) invy = 1.0/(y2-y1)
if(ii1.eq.ii2.or.jj1.eq.jj2) then
    if(ii1.eq.ii2.and.jj1.eq.jj2) then
        val = v1
    elseif(ii1.eq.ii2) then
        val = -v1*(yq-y2)*invy + v3*(yq-y1)*invy
    else
        val = -v1*(xq-x2)*invx + v2*(xq-x1)*invx
    endif
else
    val = v1*(x2-xq)*(y2-yq)+v2*(xq-x1)*(y2-yq)+v3*(x2-xq)*(yq-y1)+v4*(xq-x1)*(yq-y1)
    val = val*invx*invy
endif

end subroutine interp2D_linear


attributes(device) subroutine interp1D_linear(t,f,mlen,n,tq,fq)
!Find the value of function f = f(t) at the query point tq
!t: points at which the function is defined; f: function values at t
!tq: query point; fq: function value at tq
!mlen: maximum length of t and f; n: length of effective data in t and f
implicit NONE
real(fp_kind), intent(in)   ::  t(mlen), f(mlen), tq
real(fp_kind), intent(out)  ::  fq
integer*4, intent(in)       ::  mlen, n
integer*4   ::  j, jleft, jright
            
if(tq.le.t(1)) then
    fq = f(1)
elseif(tq.ge.t(n)) then
    fq = f(n)
else
    j = n/2; jleft = 1; jright = n;
    do
        if(tq.ge.t(j).and.tq.le.t(j+1)) exit
        if(tq.lt.t(j)) then
            jright = j; j = (j+jleft)/2
        else
            jleft = j; j = (j+jright)/2
        endif
    enddo
    fq = (f(j+1)-f(j))/(t(j+1)-t(j))*(tq-t(j)) + f(j)
endif
        
end subroutine interp1D_linear

   
end module pcomcotLIB_device





module pcomcotLIB_kernels

use VariableDefination
use pcomcotLIB_device
use okada_device

contains

attributes(global) subroutine initializeCsrArrays(LP, iLayer)
implicit NONE
type(DeviceLayerParameters) ::  LP(99)
integer*4, value    ::  iLayer
integer*4   ::  k, nz_before
integer*4   ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    k = (j-1)*LP(iLayer)%NX + i
    !/// calculate the row offsets of colum indices for CSR format ///!
    if(j.gt.1) then
        nz_before = (j-2)*(5*(LP(iLayer)%NX-2)+2) + LP(iLayer)%NX
    else
        nz_before = 0
    endif
    if(j.gt.1.and.j.lt.LP(iLayer)%NY) then
        nz_before = nz_before + MAX(5*(i-2)+1,0) 
    else
        nz_before = nz_before + i-1
    endif
    LP(iLayer)%csrRowPtrA(k) = nz_before + 1
    if(i.eq.LP(iLayer)%NX.and.j.eq.LP(iLayer)%NY)  LP(iLayer)%csrRowPtrA(k+1) = nz_before + 2
    if(i.gt.1.and.i.lt.LP(iLayer)%NX.and.j.gt.1.and.j.lt.LP(iLayer)%NY) then
        LP(iLayer)%csrValA(nz_before+1) = 1.0
        LP(iLayer)%csrValA(nz_before+2) = 1.0
        LP(iLayer)%csrValA(nz_before+3) = 1.0
        LP(iLayer)%csrValA(nz_before+4) = 1.0
        LP(iLayer)%csrValA(nz_before+5) = 1.0
        LP(iLayer)%csrColIndA(nz_before+1) = k - LP(iLayer)%NX
        LP(iLayer)%csrColIndA(nz_before+2) = k - 1
        LP(iLayer)%csrColIndA(nz_before+3) = k
        LP(iLayer)%csrColIndA(nz_before+4) = k + 1
        LP(iLayer)%csrColIndA(nz_before+5) = k + LP(iLayer)%NX
    else
        LP(iLayer)%csrValA(nz_before+1) = 1.0
        LP(iLayer)%csrColIndA(nz_before+1) = k
    endif

endif

end subroutine initializeCsrArrays



attributes(global) subroutine calculateSpongeManning(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4           ::  Iwidth, Jwidth, iin, jin
real(fp_kind)       ::  manningx, manningy
integer*4           ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(GP%CoordinatesType.eq.1) then !Cartesian
    Iwidth = MAX(NINT(GP%SpongeWidthX/LP(iLayer)%dx), 0)
    Jwidth = MAX(NINT(GP%SpongeWidthY/LP(iLayer)%dy), 0)
elseif(GP%CoordinatesType.eq.0) then !spherical
    Iwidth = NINT(GP%SpongeWidthX/GP%R_EARTH/LP(iLayer)%dx/GP%PI*180.0 &
        /COS(0.5*(LP(iLayer)%ymin+LP(iLayer)%ymax)*GP%PI/180.0))
    Jwidth = NINT(GP%SpongeWidthY/GP%R_EARTH/LP(iLayer)%dy/GP%PI*180.0)
    Iwidth = MAX(Iwidth, 0); Jwidth = MAX(Jwidth, 0)
endif

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    iin = MIN(i-1, LP(iLayer)%NX-i)
    jin = MIN(j-1, LP(iLayer)%NY-j)
    if(Iwidth.ge.2.and.iin.le.Iwidth-1) then
        manningx = GP%MaxSpongeMANNING*(1-TANH(10.0*iin/(Iwidth-1)))
    else
        manningx = 0.0
    endif
    if(Jwidth.ge.2.and.jin.le.Jwidth-1) then
        manningy = GP%MaxSpongeMANNING*(1-TANH(10.0*jin/(Jwidth-1)))
    else
        manningy = 0.0
    endif
    LP(iLayer)%SpongeMANNING(i,j) = MAX(manningx, manningy)

endif

end subroutine calculateSpongeManning


attributes(global) subroutine dampSponge(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
integer*4           ::  Iwidth, Jwidth, iin, jin
real(fp_kind)       ::  Cs, Csx, Csy
integer*4           ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(GP%CoordinatesType.eq.1) then
    Iwidth = MAX(NINT(GP%SpongeWidthX/LP(iLayer)%dx), 0)
    Jwidth = MAX(NINT(GP%SpongeWidthY/LP(iLayer)%dy), 0)
elseif(GP%CoordinatesType.eq.0) then
    Iwidth = NINT(GP%SpongeWidthX/GP%R_EARTH/LP(iLayer)%dx/GP%PI*180.0 &
        /COS(0.5*(LP(iLayer)%ymin+LP(iLayer)%ymax)*GP%PI/180.0))
    Jwidth = NINT(GP%SpongeWidthY/GP%R_EARTH/LP(iLayer)%dy/GP%PI*180.0)
    Iwidth = MAX(Iwidth, 0); Jwidth = MAX(Jwidth, 0)
endif

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    iin = MIN(i-1, LP(iLayer)%NX-i)
    jin = MIN(j-1, LP(iLayer)%NY-j)
    if(iin.le.Iwidth-1.or.jin.le.Jwidth-1) then !if this cell is in the sponge boundary
        if(iin.le.Iwidth-1) then
            Csx = GP%SpongeDampingR**iin
            Csx = GP%SpongeDampingA**Csx
        else
            Csx = 1.0
        endif
        if(jin.le.Jwidth-1) then
            Csy = GP%SpongeDampingR**jin
            Csy = GP%SpongeDampingA**Csy
        else
            Csy = 1.0
        endif
        Cs = MAX(Csx, Csy)
        LP(iLayer)%H(2,i,j) = LP(iLayer)%H(2,i,j)/Cs
        if(i.le.LP(iLayer)%NX-1) LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j)/Cs
        if(j.le.LP(iLayer)%NY-1) LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j)/Cs
    endif

endif

end subroutine dampSponge


attributes(global) subroutine froudeCap(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind)   ::  m0, n0, u0, v0, Utotal, Ulimit, u_cap, v_cap, theta
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// apply Froude cap to flux component M (leave the outermost values unchanged)///!
if(i.gt.1.and.i.lt.LP(iLayer)%NX-1.and.j.gt.1.and.j.lt.LP(iLayer)%NY) then
  
    if(LP(iLayer)%Sign_M(i,j).eq.0) then !skip wet-dry boundary
        m0 = LP(iLayer)%Mtmp(i,j)
        n0 = 0.25*(LP(iLayer)%Ntmp(i,j-1) + LP(iLayer)%Ntmp(i+1,j-1) + LP(iLayer)%Ntmp(i,j) + LP(iLayer)%Ntmp(i+1,j))
        u0 = m0/MAX(LP(iLayer)%D_M(i,j),GP%MinWaterDepth)
        v0 = n0/MAX(LP(iLayer)%D_M(i,j),GP%MinWaterDepth)
        Utotal = SQRT(u0*u0+v0*v0)
        Ulimit = GP%FrCap*SQRT(GP%GRAV*MAX(LP(iLayer)%D_M(i,j),GP%MinWaterDepth))
        if(Utotal.gt.Ulimit) then
            theta = ATAN2(v0,u0)
            u_cap = Ulimit*COS(theta)
            LP(iLayer)%M(2,i,j) = u_cap*MAX(LP(iLayer)%D_M(i,j),GP%MinWaterDepth)
        endif
    endif
    
endif

!/// apply Froude cap to flux component N (leave the outermost values unchanged)///!
if(i.gt.1.and.i.lt.LP(iLayer)%NX.and.j.gt.1.and.j.lt.LP(iLayer)%NY-1) then

    if(LP(iLayer)%Sign_N(i,j).eq.0) then !skip wet-dry boundary
        m0 = 0.25*(LP(iLayer)%Mtmp(i-1,j) + LP(iLayer)%Mtmp(i,j) + LP(iLayer)%Mtmp(i-1,j+1) + LP(iLayer)%Mtmp(i,j+1))
        n0 = LP(iLayer)%Ntmp(i,j)
        u0 = m0/MAX(LP(iLayer)%D_N(i,j),GP%MinWaterDepth)
        v0 = n0/MAX(LP(iLayer)%D_N(i,j),GP%MinWaterDepth)
        Utotal = SQRT(u0*u0+v0*v0)
        Ulimit = GP%FrCap*SQRT(GP%GRAV*MAX(LP(iLayer)%D_N(i,j),GP%MinWaterDepth))
        if(Utotal.gt.Ulimit) then
            theta = ATAN2(v0,u0)
            v_cap = Ulimit*SIN(theta)
            LP(iLayer)%N(2,i,j) = v_cap*MAX(LP(iLayer)%D_N(i,j),GP%MinWaterDepth)
        endif
    endif

endif

end subroutine froudeCap



attributes(global) subroutine getInitialElevationThisLayer(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
real(fp_kind)       ::  x, y, val
integer*4           ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    if(LP(iLayer)%Level.gt.1) then
        x = LP(iLayer)%X(i)
        y = LP(iLayer)%Y(j)
        call interpDeviceData(GP, LP, LP(iLayer)%Parent, -1, x, y, val)
        LP(iLayer)%H(1,i,j) = val
    endif
    if(LP(iLayer)%Z(i,j).le.-GP%PermanentDryLimit) then 
        LP(iLayer)%H(1,i,j) = 0.0
    elseif(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).le.0.0) then
        if(LP(iLayer)%Z(i,j).gt.0.0) then
            LP(iLayer)%H(1,i,j) = -LP(iLayer)%Z(i,j)
        else
            LP(iLayer)%H(1,i,j) = 0.0
        endif
    endif

endif

end subroutine getInitialElevationThisLayer


attributes(global) subroutine getInitialMThisLayer(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
real(fp_kind)       ::  x, y, val, z1, z2, h1, h2
integer*4           ::  i, j, s

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX-1.and.j.le.LP(iLayer)%NY) then

    if(LP(iLayer)%Level.gt.1) then
        x = LP(iLayer)%X(i) + 0.5*LP(iLayer)%dx
        y = LP(iLayer)%Y(j)
        call interpDeviceData(GP, LP, LP(iLayer)%Parent, -2, x, y, val)
        LP(iLayer)%M(1,i,j) = val
    endif
    z1 = LP(iLayer)%Z(i,j);   z2 = LP(iLayer)%Z(i+1,j)
    h1 = LP(iLayer)%H(1,i,j); h2 = LP(iLayer)%H(1,i+1,j)
    call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
    if(s.eq.999.or.s*LP(iLayer)%M(1,i,j).lt.0.0) LP(iLayer)%M(1,i,j) = 0.0

endif

end subroutine getInitialMThisLayer


attributes(global) subroutine getInitialNThisLayer(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
real(fp_kind)       ::  x, y, val, z1, z2, h1, h2
integer*4           ::  i, j, s

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY-1) then

    if(LP(iLayer)%Level.gt.1) then
        x = LP(iLayer)%X(i) 
        y = LP(iLayer)%Y(j) + 0.5*LP(iLayer)%dy
        call interpDeviceData(GP, LP, LP(iLayer)%Parent, -3, x, y, val)
        LP(iLayer)%N(1,i,j) = val
    endif
    z1 = LP(iLayer)%Z(i,j);   z2 = LP(iLayer)%Z(i,j+1)
    h1 = LP(iLayer)%H(1,i,j); h2 = LP(iLayer)%H(1,i,j+1)
    call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
    if(s.eq.999.or.s*LP(iLayer)%N(1,i,j).lt.0.0) LP(iLayer)%N(1,i,j) = 0.0

endif

end subroutine getInitialNThisLayer


attributes(global) subroutine calculateElevationOkada(GP, LP, FP, iLayer, iFault)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
type(FaultParameters)           ::  FP(4000)
integer*4, value    ::  iLayer, iFault
real(fp_kind)   ::  x, y, u1, u2, h, h_horizontal
real(fp_kind)   ::  dx, dy, zx, zy, z_slope
real(fp_kind)   ::  slip, strike, dip, rake, x0, y0, depth, xlength, xwidth
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    x = LP(iLayer)%X(i)
    y = LP(iLayer)%Y(j)
    depth   = FP(iFault)%Depth
    xlength = FP(iFault)%Length
    xwidth  = FP(iFault)%Width
    strike  = FP(iFault)%Strike
    dip     = FP(iFault)%Dip
    slip    = FP(iFault)%Slip
    rake    = FP(iFault)%Rake
    x0      = FP(iFault)%X0
    y0      = FP(iFault)%Y0

    !///calculate water depth gradient///!
    if(GP%CoordinatesType.eq.1) then !Cartesian
        dx = LP(iLayer)%dx; dy = LP(iLayer)%dy
    elseif(GP%CoordinatesType.eq.0) then !Spherical
        dx = GP%R_EARTH*COS(y*GP%PI/180.0)*LP(iLayer)%dx*GP%PI/180.0
        dy = GP%R_EARTH*LP(iLayer)%dy*GP%PI/180.0
    endif
    if(i.eq.1.or.i.eq.LP(iLayer)%NX) then
        zx = 0.0
    else
        zx = 0.5*(LP(iLayer)%Z(i+1,j)-LP(iLayer)%Z(i-1,j))/dx
    endif
    if(j.eq.1.or.j.eq.LP(iLayer)%NY) then
        zy = 0.0
    else
        zy = 0.5*(LP(iLayer)%Z(i,j+1)-LP(iLayer)%Z(i,j-1))/dy
    endif
    z_slope = SQRT(zx*zx+zy*zy)
    if(z_slope.gt.GP%MaxBottomSlope) then
        zx = zx/z_slope*GP%MaxBottomSlope
        zy = zy/z_slope*GP%MaxBottomSlope
    endif

    !/// calculate displacement using OKADA model ///!
    if(GP%CoordinatesType.eq.0) then
        x = GP%R_Earth*COS(y0*GP%PI/180.0)*(x-x0)*GP%PI/180.0
        y = GP%R_Earth*(y-y0)*GP%PI/180.0
        x0 = 0.0
        y0 = 0.0
    endif
    if(GP%PurposeCalculation.eq.2) slip = 1.0
    call okada1985(x,y,u1,u2,h,depth,xlength,xwidth,slip,strike,dip,rake,x0,y0)
    LP(iLayer)%HK(i,j) = LP(iLayer)%HK(i,j) + h

    !/// consider contribution of horizontal motion ///!
    if(GP%HorizontalMotion.eq.1) then
        h_horizontal = u1*zx + u2*zy
        if(ABS(h_horizontal).gt.ABS(h)) h_horizontal = SIGN(h,h_horizontal)
        LP(iLayer)%HK(i,j) = LP(iLayer)%HK(i,j) + h_horizontal
    endif

endif

end subroutine calculateElevationOkada


attributes(global) subroutine getSurfaceElevationFromBottom(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer
real(fp_kind)       ::  x, y, val
integer*4           ::  i, j, parent

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    if(LP(iLayer)%Level.gt.1) then
        parent = LP(iLayer)%Parent
        x = LP(iLayer)%X(i)
        y = LP(iLayer)%Y(j)
        call interp2D_linear(LP(parent)%HK, LP(parent)%X, LP(parent)%Y, LP(parent)%NX, LP(parent)%NY, x, y, val)
        LP(iLayer)%HK(i,j) = val
    endif
    if(LP(iLayer)%Z(i,j).gt.0.0.and.LP(iLayer)%H(1,i,j)+LP(iLayer)%Z(i,j).gt.GP%MinWaterDepth) &
        LP(iLayer)%H(1,i,j) = LP(iLayer)%H(1,i,j) + LP(iLayer)%HK(i,j)

endif

end subroutine getSurfaceElevationFromBottom


attributes(global) subroutine computeKajiuraGreen(kajiuraRmax, NInterpPoints)
implicit NONE
real(fp_kind), value        ::  kajiuraRmax
integer*4, value            ::  NInterpPoints
real(fp_kind), parameter    ::  RECURSIVE_STOP_FACTOR = 1.0E-5
integer*4, parameter        ::  NT = 1000
real(fp_kind), parameter    ::  PI_INV = 1.0/(ATAN(1.0)*4.0)
integer*4       ::  i, k, iter_counter
real(fp_kind)   ::  r, g, g2
logical         ::  converged

i = (blockIdx%x-1)*blockDim%x + threadIdx%x

if(i.le.NInterpPoints) then

    r = kajiuraRmax*(i-1.0)/(NInterpPoints-1.0)
    kajiuraGreenR(i) = r

    converged = .FALSE.
    !///compute the sum of the first NT terms in the series///!
    g = 0.0
    do k = 0,NT
        g = g + ((-1.0)**k)*(2.0*k+1.0)/((2.0*k+1.0)**2+r*r)**(1.5)
    enddo
    g = g * PI_INV
    iter_counter = NT
    !///calculate the trunction error///!
    do while(.not.converged)
        g2 = 0.0
        do k = iter_counter+1,iter_counter+NT
            g2 = g2 + ((-1.0)**k)*(2.0*k+1.0)/((2.0*k+1.0)**2+r*r)**(1.5)
        enddo
        g2 = g2 * PI_INV
        g = g + g2
        iter_counter = iter_counter + NT
        if(ABS(g2).le.ABS(g)*RECURSIVE_STOP_FACTOR) converged = .TRUE.
    enddo
    kajiuraGreenD(i) = g

endif

end subroutine computeKajiuraGreen



attributes(global) subroutine convolveKajiuraKernel(GP, LP, iLayer, KajiuraRmax, averageDepth)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind), value            ::  KajiuraRmax, averageDepth
real(fp_kind)   ::  smoothR, localDepth, dx, dy, lxy, gxy, GtermSum
integer*4       ::  IR, JR, mstart, mend, nstart, nend, NInterpPoints
integer*4       ::  i, j, m, n

NInterpPoints = size(kajiuraGreenR)
i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y


if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    if(LP(iLayer)%Z(i,j).le.GP%MinKajiuraDepth) then
        LP(iLayer)%HS(i,j) = LP(iLayer)%HK(i,j)
    else
        if(GP%UseAverageDepth.eq.1.and.LP(iLayer)%Z(i,j).gt.averageDepth) then
            localDepth = averageDepth
        else
            localDepth = LP(iLayer)%Z(i,j)
        endif
        smoothR = KajiuraRmax*localDepth
        if(GP%CoordinatesType.eq.1) then !Cartesian
            dx = LP(iLayer)%dx; dy = LP(iLayer)%dy
        elseif(GP%CoordinatesType.eq.0) then !Spherical
            dx = GP%R_EARTH*COS(LP(iLayer)%Y(j)*GP%PI/180.0)*LP(iLayer)%dx*GP%PI/180.0
            dy = GP%R_EARTH*LP(iLayer)%dy*GP%PI/180.0
        endif
        IR = FLOOR(smoothR/dx); JR = FLOOR(smoothR/dy)
        mstart = MAX(i-IR,1); mend = MIN(i+IR,LP(iLayer)%NX)
        nstart = MAX(j-JR,1); nend = MIN(j+JR,LP(iLayer)%NY)
        
        GtermSum = 0.0; LP(iLayer)%HS(i,j) = 0.0
        do n = nstart,nend
        do m = mstart,mend
            dx = (m-i)*LP(iLayer)%dx
            dy = (n-j)*LP(iLayer)%dy
            if(GP%CoordinatesType.eq.0) then
                dx = GP%R_EARTH*COS(LP(iLayer)%Y(j)*GP%PI/180.0)*dx*GP%PI/180.0
                dy = GP%R_EARTH*dy*GP%PI/180.0
            endif
            lxy = SQRT(dx*dx+dy*dy)/localDepth
            if(lxy.le.kajiuraRmax) then
                call interp1D_linear(kajiuraGreenR, kajiuraGreenD, NInterpPoints, NInterpPoints, lxy, gxy)
            else
                gxy = 0.0
            endif
            GtermSum = GtermSum + gxy
            LP(iLayer)%HS(i,j) = LP(iLayer)%HS(i,j) + LP(iLayer)%HK(m,n)*gxy
        enddo
        enddo
        LP(iLayer)%HS(i,j) = LP(iLayer)%HS(i,j)/GtermSum
    endif

endif

end subroutine convolveKajiuraKernel



attributes(global) subroutine setUnitInitialElevation(GP, LP, iLayer, x0, y0)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value        ::  iLayer
real(fp_kind), value    ::  x0, y0
real(fp_kind)   ::  lx, ly, lx2, ly2, x_left, x_right, y_bottom, y_top
real(fp_kind)   ::  x, y, h
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    if(GP%SourceBasisFunctionType.eq.1) then
        lx2 = (GP%SourceDX*GP%GaussianRatio)**2
        ly2 = (GP%SourceDY*GP%GaussianRatio)**2
        x = LP(iLayer)%X(i)
        y = LP(iLayer)%Y(j)
        h = EXP(-(x-x0)**2/lx2-(y-y0)**2/ly2)
    elseif(GP%SourceBasisFunctionType.eq.2) then
        lx = GP%SourceDX*GP%SigmoidCoefficient
        ly = GP%SourceDY*GP%SigmoidCoefficient
        x = LP(iLayer)%X(i)
        y = LP(iLayer)%Y(j)
        x_left   = x0 - 0.5*GP%SourceDX - lx
        x_right  = x0 + 0.5*GP%SourceDX + lx
        y_bottom = y0 - 0.5*GP%SourceDY - ly
        y_top    = y0 + 0.5*GP%SourceDY + ly
        h = (1.0/(1.0+exp((-x+x_left)/lx))+1.0/(1.0+exp((x-x_right)/lx))-1.0)* &
            (1.0/(1.0+exp((-y+y_bottom)/ly))+1.0/(1.0+exp((y-y_top)/ly))-1.0)
    endif
    LP(iLayer)%H(1,i,j) = LP(iLayer)%H(1,i,j) + h
    
    !///modify initial elevation///!
    if(LP(iLayer)%Z(i,j).le.-GP%PermanentDryLimit) then 
        LP(iLayer)%H(1,i,j) = 0.0
    elseif(LP(iLayer)%Z(i,j)+LP(iLayer)%H(1,i,j).le.0.0) then
        if(LP(iLayer)%Z(i,j).gt.0.0) then
            LP(iLayer)%H(1,i,j) = -LP(iLayer)%Z(i,j)
        else
            LP(iLayer)%H(1,i,j) = 0.0
        endif
    endif

endif

end subroutine setUnitInitialElevation



attributes(global) subroutine interpBoundaryHMNFromParent(GP, LP, iLayer, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value        ::  iLayer, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  x, y, val
real(fp_kind)   ::  z1, z2, h1, h2
integer*4       ::  i, j, s

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

if(i.le.nendx.and.j.le.nendy) then

    x = LP(iLayer)%X(i)
    y = LP(iLayer)%Y(j)
    if(iHMN.eq.2) x = x + 0.5*LP(iLayer)%dx
    if(iHMN.eq.3) y = y + 0.5*LP(iLayer)%dy
    call interpDeviceData(GP, LP, LP(iLayer)%Parent, iHMN, x, y, val)

    !///put initial values at H0/M0/N0, put final values at HF/MF/NF///!
    if(iHMN.eq.1) then
        LP(iLayer)%H0(i,j) = LP(iLayer)%H(1,i,j)
        LP(iLayer)%HF(i,j) = val
        if(LP(iLayer)%Z(i,j).le.-GP%PermanentDryLimit) then
            LP(iLayer)%HF(i,j) = 0.0
        elseif(LP(iLayer)%Z(i,j)+LP(iLayer)%HF(i,j).le.0.0) then
            if(LP(iLayer)%Z(i,j).gt.0.0) then
                LP(iLayer)%HF(i,j) = -LP(iLayer)%Z(i,j)
            else
                LP(iLayer)%HF(i,j) = 0.0
            endif
        endif
    endif

    if(iHMN.eq.2) then
        LP(iLayer)%M0(i,j) = LP(iLayer)%M(1,i,j)
        LP(iLayer)%MF(i,j) = val
        z1 = LP(iLayer)%Z(i,j);  z2 = LP(iLayer)%Z(i+1,j)
        h1 = LP(iLayer)%HF(i,j); h2 = LP(iLayer)%HF(i+1,j)
        call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
        if(s.eq.999.or.s*LP(iLayer)%MF(i,j).lt.0.0) LP(iLayer)%MF(i,j) = 0.0
    endif

    if(iHMN.eq.3) then
        LP(iLayer)%N0(i,j) = LP(iLayer)%N(1,i,j)
        LP(iLayer)%NF(i,j) = val
        z1 = LP(iLayer)%Z(i,j);  z2 = LP(iLayer)%Z(i,j+1)
        h1 = LP(iLayer)%HF(i,j); h2 = LP(iLayer)%HF(i,j+1)
        call checkFluxDirection(GP%PermanentDryLimit,z1,z2,h1,h2,s)
        if(s.eq.999.or.s*LP(iLayer)%NF(i,j).lt.0.0) LP(iLayer)%NF(i,j) = 0.0
    endif

endif

end subroutine interpBoundaryHMNFromParent


attributes(global) subroutine interpBoundaryHMNAtFineStep(GP, LP, iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value        ::  iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  t1, t2, t, deltat
real(fp_kind)   ::  z1, z2, h1, h2
integer*4       ::  i, j, s

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

t1 = 0.0; t2 = GP%dt
deltat = 1.0/(t2-t1); t = iStep*LP(iLayer)%dt

if(i.le.nendx.and.j.le.nendy) then

    if(iHMN.eq.1) then
        LP(iLayer)%H(2,i,j) = LP(iLayer)%H0(i,j) + (LP(iLayer)%HF(i,j)-LP(iLayer)%H0(i,j))*deltat*(t-t1)
        if(LP(iLayer)%H(2,i,j)+LP(iLayer)%Z(i,j).le.0.0) then
            if(LP(iLayer)%Z(i,j).gt.0.0) then
                LP(iLayer)%H(2,i,j) = -LP(iLayer)%Z(i,j)
            else
                LP(iLayer)%H(2,i,j) = 0.0
            endif
        endif
    endif

    if(iHMN.eq.2) then
        LP(iLayer)%M(2,i,j) = LP(iLayer)%M0(i,j) + (LP(iLayer)%MF(i,j)-LP(iLayer)%M0(i,j))*deltat*(t-t1)
        z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
        z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
        call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, s)
        if(s.eq.999.or.s*LP(iLayer)%M(2,i,j).lt.0.0) LP(iLayer)%M(2,i,j) = 0.0
    endif

    if(iHMN.eq.3) then
        LP(iLayer)%N(2,i,j) = LP(iLayer)%N0(i,j) + (LP(iLayer)%NF(i,j)-LP(iLayer)%N0(i,j))*deltat*(t-t1)
        z1 = LP(iLayer)%Z(i,j);   h1 = LP(iLayer)%H(2,i,j)
        z2 = LP(iLayer)%Z(i,j+1); h2 = LP(iLayer)%H(2,i,j+1)
        call checkFluxDirection(GP%PermanentDryLimit, z1, z2, h1, h2, s)
        if(s.eq.999.or.s*LP(iLayer)%N(2,i,j).lt.0.0) LP(iLayer)%N(2,i,j) = 0.0
    endif

endif

end subroutine interpBoundaryHMNAtFineStep



attributes(global) subroutine interpBoundaryPressureFromParent(GP, LP, iLayer, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value        ::  iLayer, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  x, y, val
integer*4       ::  pLayer
integer*4       ::  i, j

pLayer = LP(iLayer)%Parent

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

if(i.le.nendx.and.j.le.nendy) then

    !///put initial value in Q0, put final value in QF///!
    LP(iLayer)%Q0(i,j) = LP(iLayer)%Q(i,j)
    LP(iLayer)%QF(i,j) = 0.0

    if(LP(pLayer)%Dispersion.eq.1) then
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%HF(i,j).gt.GP%MinDispersionDepth) then
            x = LP(iLayer)%X(i)
            y = LP(iLayer)%Y(j)
            call interpDeviceData(GP, LP, pLayer, 4, x, y, val)
            LP(iLayer)%QF(i,j) = val
        endif
    endif

endif

end subroutine interpBoundaryPressureFromParent



attributes(global) subroutine interpBoundaryPressureAtFineStep(GP, LP, iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value        ::  iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  t1, t2, t, deltat
integer*4       ::  i, j

t1 = 0.0; t2 = GP%dt
deltat = 1.0/(t2-t1); t = iStep*LP(iLayer)%dt

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

if(i.le.nendx.and.j.le.nendy) then

    if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j).gt.GP%MinDispersionDepth) then
        LP(iLayer)%Q(i,j) = LP(iLayer)%Q0(i,j) + (LP(iLayer)%QF(i,j)-LP(iLayer)%Q0(i,j))*deltat*(t-t1)
    else
        LP(iLayer)%Q(i,j) = 0.0
    endif

endif

end subroutine interpBoundaryPressureAtFineStep



attributes(global) subroutine interpBoundaryViscosityFromParent(GP, LP, iLayer, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  x, y, val
integer*4       ::  pLayer, i, j

pLayer = LP(iLayer)%Parent

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

if(i.le.nendx.and.j.le.nendy) then

    !/// store initial value of viscosity in Brkv0, and final value in BrkvF ///!
    !/// store initial value of breaking age in BrkAge0, and final value in BrkAgeF ///!
    LP(iLayer)%Brkv0(i,j) = LP(iLayer)%Brkv(i,j)
    LP(iLayer)%BrkvF(i,j) = 0.0
    LP(iLayer)%BrkAge0(i,j) = LP(iLayer)%BrkAge(i,j)
    LP(iLayer)%BrkAgeF(i,j) = 0.0

    if(LP(pLayer)%Breaking.eq.1) then
        if(LP(iLayer)%Z(i,j)+LP(iLayer)%HF(i,j).gt.GP%MinWaterDepth) then
            x = LP(iLayer)%X(i)
            y = LP(iLayer)%Y(j)
            call interpDeviceData(GP, LP, pLayer, 5, x, y, val)
            LP(iLayer)%BrkvF(i,j) = val
            call interpDeviceData(GP, LP, pLayer, 6, x, y, val)
            LP(iLayer)%BrkAgeF(i,j) = val
        endif
    endif

endif

end subroutine interpBoundaryViscosityFromParent



attributes(global) subroutine interpBoundaryViscosityAtFineStep(GP, LP, iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value    ::  iLayer, iStep, iHMN, nstartx, nendx, nstarty, nendy
real(fp_kind)   ::  t1, t2, t, deltat, age0, agef
integer*4       ::  i, j

t1 = 0.0; t2 = GP%dt
deltat = 1.0/(t2-t1); t = iStep*LP(iLayer)%dt

i = (blockIdx%x-1)*blockDim%x + threadIdx%x + nstartx - 1
j = (blockIdx%y-1)*blockDim%y + threadIdx%y + nstarty - 1

if(i.le.nendx.and.j.le.nendy) then

    if(LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j).gt.GP%MinWaterDepth) then
        LP(iLayer)%Brkv(i,j) = LP(iLayer)%Brkv0(i,j) + (LP(iLayer)%BrkvF(i,j)-LP(iLayer)%Brkv0(i,j))*deltat*(t-t1)
        age0 = LP(iLayer)%BrkAge0(i,j)
        agef = LP(iLayer)%BrkAgeF(i,j)
        if(age0.gt.agef) age0 = 0.0
        LP(iLayer)%BrkAge(i,j) = age0 + (agef-age0)*deltat*(t-t1)
    else
        LP(iLayer)%Brkv(i,j)   = 0.0
        LP(iLayer)%BrkAge(i,j) = 0.0
    endif

endif

end subroutine interpBoundaryViscosityAtFineStep







attributes(global) subroutine interpStationData(GP, LP, SP, iTimeStep)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
type(DeviceStationParameters)   ::  SP(999)
integer*4, value    ::  iTimeStep
integer*4       ::  iSta, iFlag
real(fp_kind)   ::  val

iSta = (blockIdx%x-1)*blockDim%x + threadIdx%x

if(iSta.le.GP%NumStations) then

    iFlag = -1
    call interpDeviceData(GP, LP, SP(iSta)%nLayer, iFlag, SP(iSta)%X, SP(iSta)%Y, val)
    SP(iSta)%H(iTimeStep+1) = val
    if(GP%SaveFlux.eq.1) then
        iFlag = -2
        call interpDeviceData(GP, LP, SP(iSta)%nLayer, iFlag, SP(iSta)%X, SP(iSta)%Y, val)
        SP(iSta)%M(iTimeStep+1) = val

        iFlag = -3
        call interpDeviceData(GP, LP, SP(iSta)%nLayer, iFlag, SP(iSta)%X, SP(iSta)%Y, val)
        SP(iSta)%N(iTimeStep+1) = val
    endif
    if(GP%SaveDynamicPressure.eq.1.and.LP(SP(iSta)%nLayer)%Dispersion.eq.1) then
        iFlag = 4
        call interpDeviceData(GP, LP, SP(iSta)%nLayer, iFlag, SP(iSta)%X, SP(iSta)%Y, val)
        SP(iSta)%Q(iTimeStep+1) = val
    endif

endif

end subroutine interpStationData









end module pcomcotLIB_kernels