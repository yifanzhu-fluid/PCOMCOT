module breaker_kernels

use VariableDefination

contains

attributes(global) subroutine eddyViscosity(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind), parameter   ::  Cbrk1 = 0.65, Cbrk2 = 0.15 ! empirical values for initiation and cessation of wave breaking
real(fp_kind), parameter   ::  small = 1.0E-6 !threshold of too small value
real(fp_kind)   ::  T_brk, T_star, etat_star, etat_I, etat_F, B
real(fp_kind)   ::  ETAt, ETAx, ETAy, D, age, tmp
real(fp_kind)   ::  h0, h1, h2, h3, h4, z1, z2, z3, z4, lx, ly
real(fp_kind)   ::  C, angle, age1, age2, age3, propx, propy, propxy
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// determine the computational domain ///
if(LP(iLayer)%Level.eq.1) then
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY
else
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif

if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

if(i.eq.1.or.i.eq.LP(iLayer)%NX.or.j.eq.1.or.j.eq.LP(iLayer)%NY) then !exclude outermost cells
    LP(iLayer)%BrkAge(i,j) = 0.0
    LP(iLayer)%Brkv(i,j)   = 0.0
elseif(LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j).le.GP%MinWaterDepth) then !exclude too shallow area
    LP(iLayer)%BrkAge(i,j) = 0.0
    LP(iLayer)%Brkv(i,j)   = 0.0
else !calculate eddy-viscosity caused by wave breaking
    D = MAX(LP(iLayer)%Z(i,j)+LP(iLayer)%H(2,i,j), GP%FrictionDepthLimit)
    T_brk = 10.0*SQRT(MAX(LP(iLayer)%Z(i,j),GP%FrictionDepthLimit)/GP%GRAV)
    tmp = SQRT(GP%GRAV*D); etat_I = Cbrk1*tmp; etat_F = Cbrk2*tmp

    !/// estimate the age of breaking event ///!
    age = LP(iLayer)%BrkAge(i,j)
    ETAt = LP(iLayer)%H(2,i,j) - MAX(LP(iLayer)%H(1,i,j),-LP(iLayer)%Z(i,j))
    ETAt = ETAt/LP(iLayer)%dt
    
    if(ETAt.ge.etat_I.and.(age.eq.0.0.or.age.gt.T_brk)) then
        LP(iLayer)%BrkAge(i,j) = LP(iLayer)%dt
    elseif(age.gt.0.0) then
        LP(iLayer)%BrkAge(i,j) = LP(iLayer)%BrkAge(i,j) + LP(iLayer)%dt
    else
        h0 = LP(iLayer)%H(2,i,j)
        z1 = LP(iLayer)%Z(i-1,j); h1 = LP(iLayer)%H(2,i-1,j)
        z2 = LP(iLayer)%Z(i+1,j); h2 = LP(iLayer)%H(2,i+1,j)
        z3 = LP(iLayer)%Z(i,j-1); h3 = LP(iLayer)%H(2,i,j-1)
        z4 = LP(iLayer)%Z(i,j+1); h4 = LP(iLayer)%H(2,i,j+1)
        if(GP%CoordinatesType.eq.1) then
            lx = LP(iLayer)%dx; ly = LP(iLayer)%dy
        elseif(GP%CoordinatesType.eq.0) then
            lx = GP%R_EARTH*COS(LP(iLayer)%Y(j)*GP%PI/180.0)*LP(iLayer)%dx*GP%PI/180.0
            ly = GP%R_EARTH*LP(iLayer)%dy*GP%PI/180.0
        endif
        if(z1+h1.le.0.0) h1 = h0
        if(z2+h2.le.0.0) h2 = h0
        if(z3+h3.le.0.0) h3 = h0
        if(z4+h4.le.0.0) h4 = h0
        ETAx = 0.5*(h2-h1)/lx
        ETAy = 0.5*(h4-h3)/ly
        tmp = MAX(SQRT(ETAx*ETAx+ETAy*ETAy), small)
        C = MIN(ABS(ETAt)/tmp, SQRT(GP%GRAV*D))
        propx = lx/MAX(C,small)
        propy = ly/MAX(C,small)
        propxy = SQRT(lx*lx+ly*ly)/MAX(C,small)

        if(ETAt.ge.etat_F.and.(ABS(ETAx).gt.small.or.ABS(ETAy).gt.small)) then
            angle = ATAN2(-ETAy,-ETAx)*180.0/GP%PI
            !/// quadrant 1, there are 4 quadrants in total ///!
            if(angle.ge.0.0.and.angle.lt.90.0) then
                age1 = LP(iLayer)%BrkAge(i-1,j)
                age2 = LP(iLayer)%BrkAge(i-1,j-1)
                age3 = LP(iLayer)%BrkAge(i,j-1)
                if((age1.ge.LP(iLayer)%dt.and.age1.gt.propx).or. &
                   (age2.ge.LP(iLayer)%dt.and.age2.gt.propxy).or. &
                   (age3.ge.LP(iLayer)%dt.and.age3.gt.propy)) then
                    LP(iLayer)%BrkAge(i,j) = LP(iLayer)%dt
                endif
            endif
            !/// quadrant 2 ///!
            if(angle.ge.90.0.and.angle.lt.180.0) then
                age1 = LP(iLayer)%BrkAge(i+1,j)
                age2 = LP(iLayer)%BrkAge(i+1,j-1)
                age3 = LP(iLayer)%BrkAge(i,j-1)
                if((age1.ge.LP(iLayer)%dt.and.age1.gt.propx).or. &
                   (age2.ge.LP(iLayer)%dt.and.age2.gt.propxy).or. &
                   (age3.ge.LP(iLayer)%dt.and.age3.gt.propy)) then
                    LP(iLayer)%BrkAge(i,j) = LP(iLayer)%dt
                endif
            endif
            !/// quadrant 3 ///!
            if(angle.ge.-180.0.and.angle.lt.-90.0) then
                age1 = LP(iLayer)%BrkAge(i+1,j)
                age2 = LP(iLayer)%BrkAge(i+1,j+1)
                age3 = LP(iLayer)%BrkAge(i,j+1)
                if((age1.ge.LP(iLayer)%dt.and.age1.gt.propx).or. &
                   (age2.ge.LP(iLayer)%dt.and.age2.gt.propxy).or. &
                   (age3.ge.LP(iLayer)%dt.and.age3.gt.propy)) then
                    LP(iLayer)%BrkAge(i,j) = LP(iLayer)%dt
                endif
            endif
            !/// quadrant 4 ///!
            if(angle.ge.-90.0.and.angle.lt.0.0) then
                age1 = LP(iLayer)%BrkAge(i-1,j)
                age2 = LP(iLayer)%BrkAge(i-1,j+1)
                age3 = LP(iLayer)%BrkAge(i,j+1)
                if((age1.ge.LP(iLayer)%dt.and.age1.gt.propx).or. &
                   (age2.ge.LP(iLayer)%dt.and.age2.gt.propxy).or. &
                   (age3.ge.LP(iLayer)%dt.and.age3.gt.propy)) then
                    LP(iLayer)%BrkAge(i,j) = LP(iLayer)%dt
                endif
            endif
        endif
    endif

    !/// estimate eddy viscosity according to breaking age ///!
    age = LP(iLayer)%BrkAge(i,j)
    if(age.gt.0.0.and.age.lt.T_brk.and.ETAt.gt.etat_F) then
        etat_star = etat_F
        T_star = 5.0*SQRT(MAX(LP(iLayer)%Z(i,j),GP%FrictionDepthLimit)/GP%GRAV)
        if(age.lt.T_star) etat_star = etat_I + age/T_star*(etat_F-etat_I)
        B = 0.0
        if(ETAt.gt.etat_star.and.ETAt.le.2.0*etat_star) then
            B = ETAt/etat_star - 1.0
        elseif(ETAt.gt.2.0*etat_star) then
            B = 1.0
        endif
        LP(iLayer)%Brkv(i,j) = B*D*ETAt
    else
        LP(iLayer)%Brkv(i,j) = 0.0
    endif
endif

endif

end subroutine eddyViscosity



attributes(global) subroutine smoothEddyViscosity(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind)   ::  v0, v1, v2, v3, v4, v5, v6, v7, v8
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

if(i.le.LP(iLayer)%NX.and.j.le.LP(iLayer)%NY) then

    if(i.eq.1.or.i.eq.LP(iLayer)%NX.or.j.eq.1.or.j.eq.LP(iLayer)%NY) then !leave the value on the outhermost cells unchanged
        LP(iLayer)%Brkv_smooth(i,j) = LP(iLayer)%Brkv(i,j)
    else
        v0 = LP(iLayer)%Brkv(i,j)
        v1 = LP(iLayer)%Brkv(i-1,j);   v2 = LP(iLayer)%Brkv(i+1,j)
        v3 = LP(iLayer)%Brkv(i,j-1);   v4 = LP(iLayer)%Brkv(i,j+1)
        v5 = LP(iLayer)%Brkv(i-1,j-1); v6 = LP(iLayer)%Brkv(i+1,j-1)
        v7 = LP(iLayer)%Brkv(i-1,j+1); v8 = LP(iLayer)%Brkv(i+1,j+1)
        LP(iLayer)%Brkv_smooth(i,j) = v0 + (v1+v2+v3+v4-4.0*v0)/8.0 + (v5+v6+v7+v8-4.0*v0)/16.0
    endif

endif

end subroutine smoothEddyViscosity



attributes(global) subroutine breakingCartesian(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind)   ::  m0, m1, m2, m3, m5
real(fp_kind)   ::  n0, n1, n2, n3, n5  
real(fp_kind)   ::  v0, v1, v2, v3, v4, v5, v6, v7  
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// calculate eddy viscosity term for flux component M ///!
if(LP(iLayer)%Level.eq.1) then
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
else
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif

if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    !/// add eddy-viscosity only to cells where water can flow freely ///!
    if(LP(iLayer)%Sign_M(i,j).eq.0) then
        m0 = LP(iLayer)%M(1,i,j); v0 = LP(iLayer)%Brkv(i,j); v2 = LP(iLayer)%Brkv(i+1,j)
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j)
        endif
        if(j.eq.1) then
            m3 = 0.0; v3 = 0.0; v4 = 0.0
        else
            m3 = LP(iLayer)%M(1,i,j-1)
            v3 = LP(iLayer)%Brkv(i,j-1); v4 = LP(iLayer)%Brkv(i+1,j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            m5 = 0.0; v5 = 0.0; v6 = 0.0
        else
            m5 = LP(iLayer)%M(1,i,j+1)
            v5 = LP(iLayer)%Brkv(i,j+1); v6 = LP(iLayer)%Brkv(i+1,j+1)
        endif
        LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) + LP(iLayer)%CCB1*(v2*(m2-m0)-v0*(m0-m1)) &
            + 0.25*LP(iLayer)%CCB2*((v0+v2+v5+v6)*(m5-m0)-(v0+v2+v3+v4)*(m0-m3))
    endif

endif

!/// calculate eddy viscosity term for flux component N ///!
if(LP(iLayer)%Level.eq.1) then
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
else
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif

if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    !/// add eddy-viscosity only to cells where water can flow freely ///!
    if(LP(iLayer)%Sign_N(i,j).eq.0) then
        n0 = LP(iLayer)%N(1,i,j); v0 = LP(iLayer)%Brkv(i,j); v5 = LP(iLayer)%Brkv(i,j+1)
        if(j.eq.1) then
            n3 = 0.0
        else
            n3 = LP(iLayer)%N(1,i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n5 = 0.0
        else
            n5 = LP(iLayer)%N(1,i,j+1)
        endif
        if(i.eq.1) then
            n1 = 0.0; v1 = 0.0; v7 = 0.0
        else
            n1 = LP(iLayer)%N(1,i-1,j)
            v1 = LP(iLayer)%Brkv(i-1,j); v7 = LP(iLayer)%Brkv(i-1,j+1)
        endif
        if(i.eq.LP(iLayer)%NX) then
            n2 = 0.0; v2 = 0.0; v6 = 0.0
        else
            n2 = LP(iLayer)%N(1,i+1,j)
            v2 = LP(iLayer)%Brkv(i+1,j); v6 = LP(iLayer)%Brkv(i+1,j+1)
        endif
        LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) + LP(iLayer)%CCB2*(v5*(n5-n0)-v0*(n0-n3)) &
            + 0.25*LP(iLayer)%CCB1*((v0+v2+v5+v6)*(n2-n0)-(v0+v1+v5+v7)*(n0-n1))
    endif

endif

end subroutine breakingCartesian


                              
attributes(global) subroutine breakingSpherical(GP, LP, iLayer)
implicit NONE
type(DeviceGlobalParameters)    ::  GP
type(DeviceLayerParameters)     ::  LP(99)
integer*4, value                ::  iLayer
real(fp_kind)   ::  m0, m1, m2, m3, m5
real(fp_kind)   ::  n0, n1, n2, n3, n5  
real(fp_kind)   ::  v0, v1, v2, v3, v4, v5, v6, v7
real(fp_kind)   ::  csy1, csy2  
integer*4       ::  nstartx, nendx, nstarty, nendy
integer*4       ::  i, j

i = (blockIdx%x-1)*blockDim%x + threadIdx%x
j = (blockIdx%y-1)*blockDim%y + threadIdx%y

!/// calculate eddy viscosity term for flux component M ///!
if(LP(iLayer)%Level.eq.1) then
    nstartx = 1; nendx = LP(iLayer)%NX-1
    nstarty = 1; nendy = LP(iLayer)%NY
else
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST-1
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST
endif

if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    !/// add eddy-viscosity only to cells where water can flow freely ///!
    if(LP(iLayer)%Sign_M(i,j).eq.0) then
        m0 = LP(iLayer)%M(1,i,j); v0 = LP(iLayer)%Brkv(i,j); v2 = LP(iLayer)%Brkv(i+1,j)
        if(i.eq.1) then
            m1 = 0.0
        else
            m1 = LP(iLayer)%M(1,i-1,j)
        endif
        if(i.eq.LP(iLayer)%NX-1) then
            m2 = 0.0
        else
            m2 = LP(iLayer)%M(1,i+1,j)
        endif
        if(j.eq.1) then
            m3 = 0.0; v3 = 0.0; v4 = 0.0
            csy1 = COS((LP(iLayer)%ymin-0.5*LP(iLayer)%dy)*GP%PI/180.0)
        else
            m3 = LP(iLayer)%M(1,i,j-1)
            v3 = LP(iLayer)%Brkv(i,j-1); v4 = LP(iLayer)%Brkv(i+1,j-1)
            csy1 = LP(iLayer)%CSY(j-1)
        endif
        if(j.eq.LP(iLayer)%NY) then
            m5 = 0.0; v5 = 0.0; v6 = 0.0
            csy2 = COS((LP(iLayer)%ymax+0.5*LP(iLayer)%dy)*GP%PI/180.0)
        else
            m5 = LP(iLayer)%M(1,i,j+1)
            v5 = LP(iLayer)%Brkv(i,j+1); v6 = LP(iLayer)%Brkv(i+1,j+1)
            csy2 = LP(iLayer)%CSY(j)
        endif
        LP(iLayer)%M(2,i,j) = LP(iLayer)%M(2,i,j) + LP(iLayer)%CSB1(j)*(v2*(m2-m0)-v0*(m0-m1)) &
            + 0.25*LP(iLayer)%CSB2(j)*((v0+v2+v5+v6)*(m5-m0)*csy2-(v0+v2+v3+v4)*(m0-m3)*csy1)
    endif

endif

!/// calculate eddy viscosity term for flux component N ///!
if(LP(iLayer)%Level.eq.1) then
    nstartx = 1; nendx = LP(iLayer)%NX
    nstarty = 1; nendy = LP(iLayer)%NY-1
else
    nstartx = GP%nGHOST+1; nendx = LP(iLayer)%NX-GP%nGHOST
    nstarty = GP%nGHOST+1; nendy = LP(iLayer)%NY-GP%nGHOST-1
endif

if(i.ge.nstartx.and.i.le.nendx.and.j.ge.nstarty.and.j.le.nendy) then

    !/// add eddy-viscosity only to cells where water can flow freely ///!
    if(LP(iLayer)%Sign_N(i,j).eq.0) then
        n0 = LP(iLayer)%N(1,i,j); v0 = LP(iLayer)%Brkv(i,j); v5 = LP(iLayer)%Brkv(i,j+1)
        csy1 = COS(LP(iLayer)%Y(j)*GP%PI/180.0); csy2 = COS(LP(iLayer)%Y(j+1)*GP%PI/180.0)
        if(j.eq.1) then
            n3 = 0.0
        else
            n3 = LP(iLayer)%N(1,i,j-1)
        endif
        if(j.eq.LP(iLayer)%NY-1) then
            n5 = 0.0
        else
            n5 = LP(iLayer)%N(1,i,j+1)
        endif
        if(i.eq.1) then
            n1 = 0.0; v1 = 0.0; v7 = 0.0
        else
            n1 = LP(iLayer)%N(1,i-1,j)
            v1 = LP(iLayer)%Brkv(i-1,j); v7 = LP(iLayer)%Brkv(i-1,j+1)
        endif
        if(i.eq.LP(iLayer)%NX) then
            n2 = 0.0; v2 = 0.0; v6 = 0.0
        else
            n2 = LP(iLayer)%N(1,i+1,j)
            v2 = LP(iLayer)%Brkv(i+1,j); v6 = LP(iLayer)%Brkv(i+1,j+1)
        endif
        LP(iLayer)%N(2,i,j) = LP(iLayer)%N(2,i,j) + LP(iLayer)%CSB4(j)*(v5*(n5-n0)*csy2-v0*(n0-n3)*csy1) &
            + 0.25*LP(iLayer)%CSB3(j)*((v0+v2+v5+v6)*(n2-n0)-(v0+v1+v5+v7)*(n0-n1))
    endif

endif

end subroutine breakingSpherical


end module breaker_kernels